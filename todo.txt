Photo organization tool:

Appearance: http://photonkit.com/
GUI: https://facebook.github.io/react/
Server: http://sailsjs.com/
Application: http://electron.atom.io/

BAD ===
in controller / database, track config file. upon load, compare with new one. If changes are made,
see what needs to be done. ie: changing the folder structure would require moving/hardlinking all photos into the new structure
== Second thought this is a bad idea. Better to have dedicated functions that change the settings and do the legwork than to manually change
the settings, have to check for changes and then fire off a function anyway if certain critera are met. K.I.S.S

file system: npm install fs-extra

Do we want ffprobe?

do we want different dates to be in the same event? maybe have an event date, and a photo date, but keep it separate?
perhaps events need to have their own entry in the db?
could be dynamically built out of views. though date would have to manually be added?
perhaps dynamically edited to show contents of event?
are we getting too reliant on db at this point though?

need uuid, or xkcd-password or something to make unique names for stash

storage class...

storage doc:
{
_id : ID
src : Original location
path : repo location
date : date taken
event : event taken
tags : people in photo, other tags?
_rev : revision
_attachments : [] thumbnail
state : position in repo. 2 = staged, 1 = stored, 0 = missing
hash : perceptual hash of image for duplicate testing
}

make repo git-like. ie:
repo.add (files) can add docs, create thumbnails, and hashes, but not add files to the repo directly. Just keeping the source linked. OR can copy files to a location in which we can sort them.
repo.commit ("message?") store all the added "stashed" files into the repo using the path format.
repo.get("stash") get all details of images in stash.

need views that cover:
hashes for duplication testing
state for grabbing files only in stash, or missing files
path for finding _id based on file path in repo

detect if cameras are plugged in. perhaps looking for dcim?

face detection for tagging. OpenCV? Something more javascripty? replace canvas calls with jimp for ccv.js face detect

optional image compression using mozjpeg or something similar? jimp can compress? anything else?

make a database that logs dhash (or some other hash), file path, date added, date taken, event name, thumbnail path, anything else?
Use dhash to check for existing duplicates.
perhaps a more efficient way of checking for duplications?

Copy files to a staging area to organize and tag them, then insert into file structure as two step process.



use rclone to run backups automatically

have cleanup tasks to do things like run through the thumbnails and delete thigns taht don't exist in DB. Track when last run. Have setting in config telling how

often to run. Run on startup.

Another cleanup task. Check files are still in folders.

use async library to limit number of ffmpeg calls at once. Throw the number of processes in the config.
